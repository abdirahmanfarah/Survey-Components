{"version":3,"sources":["components/Form.js","components/Title.js","components/Rating.js","App.js","serviceWorker.js","index.js"],"names":["withFormik","mapPropsToValues","values","Name","Age","Email","validationSchema","yup","shape","required","handleSubmit","setStatus","axios","post","then","res","data","console","log","catch","err","errors","touched","status","useState","survey","setSurvey","useEffect","className","type","name","placeholder","component","Header","id","Star","notes","newMember","onSubmit","event","preventDefault","emptySymbol","fullSymbol","onChange","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAkDeA,cAAW,CACxBC,iBAAiB,SAACC,GAChB,MAAO,CACLC,KAAKD,EAAOC,MAAQ,GACpBC,IAAKF,EAAOE,KAAO,GACnBC,MAAOH,EAAOG,OAAS,KAGzBC,iBAAkBC,WAAaC,MAAM,CACnCL,KAAMI,WAAaE,WACnBL,IAAKG,WAAaE,WAClBJ,MAAOE,WAAaE,aAEtBC,aAAa,SAACR,EAAD,GAA2B,IAAhBS,EAAe,EAAfA,UACrBC,IACIC,KAAK,8BAA+BX,GAClCY,MAAK,SAAAC,GACJJ,EAAUI,EAAIC,MACdC,QAAQC,IAAIH,EAAIC,SAEjBG,OAAM,SAACC,GACNH,QAAQC,IAAI,SAAUE,QArBrBpB,EAlCD,SAAC,GAA+B,IAA9BqB,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,OAAY,EAEfC,mBAAS,IAFM,mBAEpCC,EAFoC,KAE5BC,EAF4B,KAU3C,OANAC,qBAAU,WACLJ,GACDG,EAAU,GAAD,mBAAKD,GAAL,CAAaF,OAExB,CAACA,IAGD,yBAAKK,UAAW,QACd,kBAAC,IAAD,KACA,6GACGN,EAAQnB,MAAQkB,EAAOlB,MAAQ,2BAAIkB,EAAOlB,MAC3C,kBAAC,IAAD,CAAO0B,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAE1CT,EAAQlB,KAAOiB,EAAOlB,MAAQ,2BAAIkB,EAAOjB,KAC1C,kBAAC,IAAD,CAAOyB,KAAK,OAAOC,KAAK,MAAMC,YAAY,QAEzCT,EAAQjB,OAASgB,EAAOlB,MAAQ,2BAAIkB,EAAOhB,OAC5C,kBAAC,IAAD,CAAOwB,KAAK,OAAOC,KAAK,QAAQC,YAAY,UAE5C,kBAAC,IAAD,CAAOC,UAAU,WAAWH,KAAK,OAAOC,KAAK,YAAYC,YAAY,uDAErE,kBAAC,IAAD,CAAOC,UAAU,WAAWH,KAAK,OAAOC,KAAK,YAAYC,YAAY,uDAErE,4BAAQF,KAAK,UAAb,eC7BOI,EATD,WAEZ,OACE,yBAAKL,UAAU,QAAQM,GAAG,SACxB,4CACA,6H,+OCJN,IA+CeC,EA/CF,WAAO,IAAD,EAEWX,mBAAS,IAFpB,mBAEVD,EAFU,KAEFZ,EAFE,OAIiBa,mBAAS,CACzCY,MAAO,KALQ,mBAIVC,EAJU,UAiCjB,OACG,yBAAKT,UAAW,QACd,0BAAOU,SAtBS,SAAAC,GACnBA,EAAMC,iBACNvB,QAAQC,IAAIK,GACZX,IACCC,KAAK,+BACHC,MAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZJ,EAAUI,EAAIC,MACdC,QAAQC,IAAIH,EAAIC,SAEjBG,OAAM,SAACC,GACNH,QAAQC,IAAI,SAAUE,QAYrB,uCACC,kBAAC,IAAD,CAAQqB,YAAY,oBAAoBC,WAAW,qBACnD,8BAAUd,UAAU,WAAWE,KAAK,QAAQa,SA7B/B,SAAAJ,GACnB5B,E,yVAAU,CAAD,GAAK0B,EAAL,eAAiBE,EAAMK,OAAOd,KAAOS,EAAMK,OAAOC,UA4BgBd,YAAY,aACjF,2CCxBKe,MAXf,WAEE,OACE,yBAAKlB,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJgBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.a873556f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { withFormik, Form, Field } from 'formik';\r\nimport * as yup from 'yup';\r\nimport axios from \"axios\";\r\n\r\n// import { Route, NavLink } from \"react-router-dom\";\r\n\r\n// import styled from 'styled-components';\r\n\r\n// const form = styled.form`\r\n//     background:blue;\r\n//     width:100px;\r\n// `;\r\n\r\n\r\nconst Survey =({errors, touched, status}) => {\r\n\r\n  const [survey, setSurvey] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if(status){\r\n      setSurvey([...survey, status])\r\n    }\r\n  },[status])\r\n\r\n  return (\r\n    <div className ='form'>\r\n      <Form>\r\n      <h3>To help you get the best sleep, we need to know a couple of things about you.</h3>\r\n        {touched.Name && errors.Name && <p>{errors.Name}</p>}\r\n        <Field type=\"text\" name=\"Name\" placeholder=\"Name\" />\r\n        \r\n        {touched.Age && errors.Name && <p>{errors.Age}</p>}\r\n        <Field type=\"text\" name=\"Age\" placeholder=\"Age\" />\r\n  \r\n        {touched.Email && errors.Name && <p>{errors.Email}</p>}\r\n        <Field type=\"text\" name=\"Email\" placeholder=\"Email\" />\r\n\r\n        <Field component=\"textarea\" type=\"text\" name=\"Question1\" placeholder=\"What is something you love about using this app?  \" />\r\n\r\n        <Field component=\"textarea\" type=\"text\" name=\"Question2\" placeholder=\"What is something that can be better implemented? \" />\r\n  \r\n        <button type=\"submit\">Submit\r\n        </button>\r\n      </Form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withFormik({\r\n  mapPropsToValues:(values) => {\r\n    return {\r\n      Name:values.Name || \"\",\r\n      Age: values.Age || \"\",\r\n      Email: values.Email || \"\"\r\n    }\r\n  },\r\n    validationSchema: yup.object().shape({\r\n      Name: yup.string().required(),\r\n      Age: yup.string().required(),\r\n      Email: yup.string().required()\r\n    }),\r\n    handleSubmit:(values, { setStatus}) => {\r\n       axios\r\n          .post(\"https://reqres.in/api/users\", values)\r\n            .then(res => {\r\n              setStatus(res.data)\r\n              console.log(res.data)\r\n            })\r\n            .catch((err) => {\r\n              console.log('Error:', err)\r\n            })\r\n    }\r\n\r\n  \r\n\r\n})(Survey);","import React from 'react';\r\n\r\n// import styled from 'styled-components';\r\n\r\n\r\nconst Header =() => {\r\n\r\n  return (\r\n    <div className=\"title\" id=\"Title\">\r\n      <h1>Hello there!</h1>\r\n      <p>We have some great ideas for our app but we would love your feedback to help make it better!</p>\r\n    </div>\r\n  )\r\n}\r\nexport default Header;\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport Rating from \"react-rating\"\r\nimport axios from \"axios\"\r\n\r\n\r\n\r\nconst Star = () => {\r\n  \r\n  const [status, setStatus] = useState([]);\r\n\r\n  const [newMember, setNewMember] = useState({\r\n    notes: \"\",\r\n    \r\n  });\r\n\r\n  const handleChange = event => {\r\n    setStatus({...newMember, [event.target.name] :event.target.value})\r\n  }\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(status);\r\n    axios \r\n    .post(\"https://reqres.in/api/users\")\r\n      .then(res => {\r\n        console.log(res);\r\n        setStatus(res.data);\r\n        console.log(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log('Error:', err)\r\n      })\r\n    }\r\n  \r\n    // const rating = event => {\r\n      \r\n    // }\r\n\r\n\r\n  return (\r\n     <div className =\"Star\">\r\n       <form  onSubmit={handleSubmit}>\r\n         <h1>Rate Us</h1>\r\n          <Rating emptySymbol=\"far fa-star fa-2x\" fullSymbol=\"fa fa-star fa-2x\"/>\r\n          <textarea className=\"feedback\" name=\"notes\" onChange={handleChange}  placeholder=\"Feedback\" ></textarea>\r\n          <button>Next</button>\r\n\r\n       </form>\r\n        </div>\r\n  \r\n  )\r\n  \r\n}\r\nexport default Star;\r\n\r\n\r\n\r\n","import React from 'react';\n\nimport './App.css';\nimport Survey from './components/Form';\nimport Header from './components/Title';\nimport Star from './components/Rating'\n\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    <Header />\n    <Star />\n    <Survey />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}